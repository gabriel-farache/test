version: "3"

vars:
  NAME: "go-kcloutie"
  DESCRIPTION: "This application adheres to Go's best practices and incorporates widely-used libraries such as cobra for CLI parameters, gin for the REST API, and zap for logging, among others."
  OUTPUT_FILE: "{{.NAME}}{{exeExt}}"
  BUILD_COMMIT:
    sh: git rev-parse HEAD || echo "nightly"
  GIT_URL:
    sh: git remote get-url origin || echo "https://github.com"
  IS_SHALLOW:
    sh: git rev-parse --is-shallow-repository 2>/dev/null || echo "false"
  CONTAINER_REGISTRY: "us-central1-docker.pkg.dev/-"
  CONTAINER_REGISTRY_NAMESPACE: "gokcloutie-container-images"
  BASE_CONTAINER_IMAGE: "registry.access.redhat.com/ubi9-minimal:9.3-1612@sha256:119ac25920c8bb50c8b5fd75dcbca369bf7d1f702b82f3d39663307890f0bf26"
  BUILD_DATE: '{{ now | date "2006-01-02T15:04:05Z07:00" }}'
  SERVER_CONFIG_FILE: "{{.ROOT_DIR}}/tests/files/serverConfig.json"
  DIST: "{{.ROOT_DIR | toSlash }}/dist"
  FIX_PATH: "{{ if eq OS `windows` }}PATH='C:/tools/git/usr/bin;{{ env `path` }}'{{ else }}:{{ end }}"

env:
  CGO_ENABLED: "0"

tasks:
  get-build-version:
    desc: Get the build version
    cmds:
      - |
        (git describe --abbrev=0 --tags 2>/dev/null || echo "0.0.1-alpha") > BUILD_VERSION.txt

  git-unshallow-clone:
    desc: Checks if the repository is shallow and unshallow if needed
    cmds:
      - |
        if [ "{{ .IS_SHALLOW }}" = "true" ]; then
          echo "Repository is shallow. Attempting to unshallow..."
          git fetch --unshallow
        else
          echo "Repository is not shallow. No action needed."
        fi
    silent: true
    requires:
      vars: [IS_SHALLOW]

  mod:
    desc: Downloads and tidy Go modules
    cmds:
      - |
        go mod download
        go mod tidy

  lint:
    deps: [build]
    desc: Runs golangci-lint
    aliases: [l]
    sources:
      - "./**/*.go"
      - .golangci.yml
    cmds:
      - |
        {{ .FIX_PATH }}
        golangci-lint run --timeout 10m0s --issues-exit-code=0

  lint:fix:
    desc: Runs golangci-lint and fixes any issues
    sources:
      - "./**/*.go"
      - .golangci.yml
    cmds:
      - |
        {{ .FIX_PATH }}
        golangci-lint run --fix

  build:
    deps: [mod, git-unshallow-clone]
    desc: "Build the CLI"
    vars:
      LDFLAGS: '-ldflags "-s -w -X main.BuildTime={{.BUILD_DATE}} -X main.BuildVersion=$(cat BUILD_VERSION.txt) -X main.Commit={{.BUILD_COMMIT}}"'
    cmds:
      - task: get-build-version
      - |
        {{ .FIX_PATH }}

        BUILD_VERSION=$(cat BUILD_VERSION.txt)
        echo "BUILD_DATE - {{.BUILD_DATE}}"
        echo "BUILD_COMMIT - {{.BUILD_COMMIT}}"
        echo "BUILD_VERSION - $BUILD_VERSION"
        echo "OUTPUT_FILE - {{.OUTPUT_FILE}}"
        echo "{{.NAME}} Binary - {{.DIST}}/{{.OUTPUT_FILE}}"
        echo ""
        echo "Building CLI..."
        GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build {{.LDFLAGS}} -v -o {{.DIST}}/{{.OUTPUT_FILE}} ./cmd/gokcloutie/gokcloutie.go
    silent: true

  run:
    deps: [build]
    desc: "Run the API server"
    cmds:
      - |
        echo "Running Server..."
        "{{.DIST}}/{{.OUTPUT_FILE}} run server -c {{.SERVER_CONFIG_FILE}}"
    silent: true

  test:
    desc: Runs test suite
    aliases: [t]
    deps: [build]
    cmds:
      - |
        echo "Running Unit Tests..."
        go test ./...
    silent: true

  test:e2e:
    deps: [lint]
    desc: "Run end-to-end tests"
    cmds:
      - |
        echo "Running E2E Tests..."
        go test ./... -cover
    silent: true

  release:
    desc: "Release the product"
    deps: [git-unshallow-clone]
    cmds:
      - |
        {{ .FIX_PATH }}

        rm BUILD_VERSION.txt

        echo "Releasing Product..."
        if [[ -n "$GPG_FINGERPRINT" ]]; then
          goreleaser release --clean
        else
          goreleaser release --clean --skip sign
        fi
    silent: true

  docs:
    desc: "Generate documentation"
    cmds:
      - |
        {{ .FIX_PATH }}
        echo "Generating Docs..."
        go run ./cmd/gen-docs --standard --doc-path docs/gokcloutie
        swag init --generalInfo ./cmd/gokcloutie/gokcloutie.go --parseDependency --parseInternal
    silent: true

  docs-custom:
    desc: "Generate custom documentation"
    cmds:
      - |
        echo "Generating Custom Docs..."
        go run ./cmd/gen-docs --custom --doc-path docs/custom
    silent: true

  build-container-image:
    desc: "Build container image"
    env:
      CGO_ENABLED: "0"
      GOOS: "linux"
      GOARCH: "amd64"
      OUTPUT_FILE: "{{.NAME}}"
    cmds:
      - task: build
        vars:
          CGO_ENABLED: "0"
          GOOS: "linux"
          GOARCH: "amd64"
          OUTPUT_FILE: "{{.NAME}}"
      - |
        {{ .FIX_PATH }}

        BUILD_VERSION=$(cat BUILD_VERSION.txt)
        mkdir -p {{.DIST}}/home/default
        cp -rf {{.DIST}}/$OUTPUT_FILE {{.DIST}}/home/default/

        {{ if eq OS `windows` }}#
          tar --owner=0 --group=0 --mode=0775 -C {{.DIST}}/ -cvf {{.DIST}}/$OUTPUT_FILE.tar home/default --force-local
        {{ else }}#
          tar --owner=0 --group=0 --mode=0775 -C {{.DIST}}/ -cvf {{.DIST}}/$OUTPUT_FILE.tar home/default
        {{ end }}#

        crane mutate \
        --append {{.DIST}}/$OUTPUT_FILE.tar {{.BASE_CONTAINER_IMAGE}} \
        --label org.opencontainers.image.version="$BUILD_VERSION" \
        --label org.opencontainers.image.title="{{.NAME}}" \
        --label org.opencontainers.image.description="{{.DESCRIPTION}}" \
        --label org.opencontainers.image.url="https://{{.CONTAINER_REGISTRY}}/{{.CONTAINER_REGISTRY_NAMESPACE}}/{{.NAME}}" \
        --label org.opencontainers.image.documentation="{{.GIT_URL}}" \
        --label org.opencontainers.image.source="{{.GIT_URL}}" \
        --label org.opencontainers.image.revision="$BUILD_VERSION" \
        --label org.opencontainers.image.created="{{.BUILD_DATE}}" \
        --label quay.expires-after="12w" \
        --env HOME=/home/default \
        --workdir /home/default \
        --entrypoint /home/default/{{.NAME}} \
        --user 1001 \
        --tag {{.CONTAINER_REGISTRY}}/{{.CONTAINER_REGISTRY_NAMESPACE}}/{{.NAME}}:$BUILD_VERSION
